apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'maven'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'commons-io:commons-io:2.4'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

 
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task easyTestJar(type:Copy) {
    from jar
    into file("$buildDir/tmp/libs")
    rename { filename ->
        filename= project.name + '.jar'
    }
}
compileTestGroovy.dependsOn(easyTestJar)

group "$GROUPID"
ext.deployUsername= project.hasProperty('REPO_USERNAME') ? "$REPO_USERNAME" : ""
ext.deployPassword= project.hasProperty('REPO_PASSWORD') ? "$REPO_PASSWORD" : ""
if(project.version.toString().endsWith('-SNAPSHOT')) {
    ext.deployUrl= "${REPO_URL_SNAPSHOT}"
} else {
    ext.deployUrl= "${REPO_URL_RELEASE}"
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

jar {
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": project.group,
        )
    }
}

ext.extraResources= file("$buildDir/tmp/resources")

sourceSets {
    main {
        resources {
            srcDirs+= extraResources
        }
    }
}

task deployRepublishScript(type:Copy) {
    from file("src/main/templates")
    into extraResources
    expand(VERSION:project.version)
}
compileJava.dependsOn(deployRepublishScript)

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: deployUrl) {
                authentication(userName: deployUsername, password: deployPassword)
            }

            pom.project {
                name project.name
                description "$DESCRIPTION"
                url "$PROJECT_URL"

                scm {
                    url "scm:$SCM_URL"
                    connection "scm:$SCM_URL"
                    developerConnection "scm:$SCM_URL"
                }

                licenses {
                    license {
                        name "$LICENSE_NAME"
                        url "$LICENSE_URL"
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id "$DEVELOPER_ID"
                        name "$DEVELOPER_NAME"
                    }
                }
            }
        }
    }
}
